// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	gocloak "github.com/Nerzal/gocloak/v13"

	mock "github.com/stretchr/testify/mock"
)

// IKeycloakClient is an autogenerated mock type for the IKeycloakClient type
type IKeycloakClient struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, token, role, user
func (_m *IKeycloakClient) CreateUser(ctx context.Context, token string, role *gocloak.Role, user gocloak.User) (string, error) {
	ret := _m.Called(ctx, token, role, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *gocloak.Role, gocloak.User) (string, error)); ok {
		return rf(ctx, token, role, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *gocloak.Role, gocloak.User) string); ok {
		r0 = rf(ctx, token, role, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *gocloak.Role, gocloak.User) error); ok {
		r1 = rf(ctx, token, role, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserByID provides a mock function with given fields: ctx, token, userID
func (_m *IKeycloakClient) DeleteUserByID(ctx context.Context, token string, userID string) error {
	ret := _m.Called(ctx, token, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, token, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUsers provides a mock function with given fields: ctx, token
func (_m *IKeycloakClient) GetAllUsers(ctx context.Context, token string) ([]*gocloak.User, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []*gocloak.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*gocloak.User, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*gocloak.User); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*gocloak.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoleByID provides a mock function with given fields: ctx, token, roleID
func (_m *IKeycloakClient) GetRoleByID(ctx context.Context, token string, roleID string) (*gocloak.Role, error) {
	ret := _m.Called(ctx, token, roleID)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleByID")
	}

	var r0 *gocloak.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*gocloak.Role, error)); ok {
		return rf(ctx, token, roleID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *gocloak.Role); ok {
		r0 = rf(ctx, token, roleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocloak.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, token, roleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, token, userID
func (_m *IKeycloakClient) GetUserByID(ctx context.Context, token string, userID string) (*gocloak.User, error) {
	ret := _m.Called(ctx, token, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *gocloak.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*gocloak.User, error)); ok {
		return rf(ctx, token, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *gocloak.User); ok {
		r0 = rf(ctx, token, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocloak.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, token, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByNickName provides a mock function with given fields: ctx, token, nickName
func (_m *IKeycloakClient) GetUserByNickName(ctx context.Context, token string, nickName string) (*gocloak.User, error) {
	ret := _m.Called(ctx, token, nickName)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByNickName")
	}

	var r0 *gocloak.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*gocloak.User, error)); ok {
		return rf(ctx, token, nickName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *gocloak.User); ok {
		r0 = rf(ctx, token, nickName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocloak.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, token, nickName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsValidToken provides a mock function with given fields: ctx, accessToken
func (_m *IKeycloakClient) IsValidToken(ctx context.Context, accessToken string) (bool, error) {
	ret := _m.Called(ctx, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for IsValidToken")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, accessToken)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, user, password
func (_m *IKeycloakClient) Login(ctx context.Context, user string, password string) (*gocloak.JWT, error) {
	ret := _m.Called(ctx, user, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *gocloak.JWT
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*gocloak.JWT, error)); ok {
		return rf(ctx, user, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *gocloak.JWT); ok {
		r0 = rf(ctx, user, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gocloak.JWT)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, user, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: ctx, refreshToken
func (_m *IKeycloakClient) Logout(ctx context.Context, refreshToken string) error {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIKeycloakClient creates a new instance of IKeycloakClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIKeycloakClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IKeycloakClient {
	mock := &IKeycloakClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
