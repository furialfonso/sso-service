// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	request "cow_sso/api/handlers/user/request"

	mock "github.com/stretchr/testify/mock"

	response "cow_sso/api/handlers/user/response"
)

// IUserService is an autogenerated mock type for the IUserService type
type IUserService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, token, userRequest
func (_m *IUserService) Create(ctx context.Context, token string, userRequest request.UserRequest) error {
	ret := _m.Called(ctx, token, userRequest)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, request.UserRequest) error); ok {
		r0 = rf(ctx, token, userRequest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, token, userID
func (_m *IUserService) Delete(ctx context.Context, token string, userID string) (string, error) {
	ret := _m.Called(ctx, token, userID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, token, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, token, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, token, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, token
func (_m *IUserService) GetAll(ctx context.Context, token string) ([]response.UserResponse, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []response.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]response.UserResponse, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []response.UserResponse); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]response.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByNickName provides a mock function with given fields: ctx, token, nickName
func (_m *IUserService) GetByNickName(ctx context.Context, token string, nickName string) (response.UserResponse, error) {
	ret := _m.Called(ctx, token, nickName)

	if len(ret) == 0 {
		panic("no return value specified for GetByNickName")
	}

	var r0 response.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (response.UserResponse, error)); ok {
		return rf(ctx, token, nickName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) response.UserResponse); ok {
		r0 = rf(ctx, token, nickName)
	} else {
		r0 = ret.Get(0).(response.UserResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, token, nickName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIUserService creates a new instance of IUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserService {
	mock := &IUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
